{"version":3,"sources":["components/SortingVis/SortingButtons/SortingAlgorithms.js","components/SortingVis/SortingButtons/ColorPick/ColorPick.js","components/SortingVis/SortingButtons/Slider/Slider.js","components/SortingVis/SortingButtons/SortingButtons.js","components/SortingVis/SortingVis.js","App.js","index.js"],"names":["heapify","input","size","i","heapAnimation","max","left","right","push","heapSwap","first","second","temp","mergeSortAnimations","array","tempArray","Array","from","mergeAnimation","mergeSortHelper","startIndex","endIndex","middleIndex","Math","floor","x","y","z","mergeSortHelp","length","ColorPick","props","state","displayColorPicker","color","r","barColor","g","b","a","handleClick","bind","handleChange","this","setState","rgb","styles","reactCSS","width","height","borderRadius","background","swatch","padding","display","cursor","popover","position","zIndex","cover","style","onClick","fontSize","buttonText","colorPickDisabled","handleClose","onChange","changeColor","React","Component","Slider","className","event","changeSpeedValue","target","value","type","min","disabled","sliderDisabled","SortingButtons","animation","timeoutAnimation","bars","document","getElementsByClassName","sortingSpeed","swapColor","secondColor","heapSort","changeSortingSpeed","changeSwapColor","disableButtons","isSwapped","bubbleAnimation","bubbleSortAnimations","firstIndex","secondIndex","typeChange","instruction","colorSwap","setTimeout","index","heightVal","heapSortAnimations","barSwap","insertionAnimation","j","insertionSortAnimations","selectionAnimation","minimum","selectionSortAnimations","backgroundColor","clearTimeout","firstVal","secondVal","checkColor","firstBar","secondBar","speed","stateArray","resetArray","reset","bubbleSort","mergeSort","insertionSort","selectionSort","SCREEN_WIDTH","window","innerWidth","SCREEN_HEIGHT","innerHeight","NUM_ARRAY_BARS","SortingVis","primaryColor","secondaryColor","generateNewArray","random","finalArray","map","number","id","key","App","ReactDom","render","getElementById"],"mappings":"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","file":"static/js/main.d8a1694a.chunk.js","sourcesContent":["//SortingAlgorithms.js\n//File that contains functions for each sorting algorithm\n\n//bubbleSortAnimations function\n//Parameters: input - array storing all values\n//Returns: array containing a list of animations\n//Does: Performs a bubble sort and adds required swap and color animations\n//      to an array to visualize\nexport function bubbleSortAnimations(input) {\n        let bubbleAnimation = []\n        let length = input.length;\n        let isSwapped;\n        do {\n                isSwapped = false;\n                for (let i = 0; i < length-1; i++) {\n                        if (input[i] > input[i + 1]) { \n\n                                //push indices to change colors\n                                bubbleAnimation.push([i, i+1, 'color', 'change']);\n                                bubbleAnimation.push([i, i+1, 'color', 'revert']);   \n                                //push indices to swap bars \n                                bubbleAnimation.push([i, input[i+1], 'height'])\n                                bubbleAnimation.push([i+1, input[i], 'height'])\n                                \n                                let temp = input[i];\n                                input[i] = input[i + 1];\n                                input[i + 1] = temp;\n                                isSwapped = true;\n                        }\n                }\n        } while (isSwapped);\n        return bubbleAnimation\n};\n\n//insertionSortAnimations function\n//Parameters: input - array storing all values\n//Returns: array containing a list of animations\n//Does: Performs an insertion sort and pushes required swap and color animations\n//      to the array to visualize\nexport function insertionSortAnimations(input) {\n        let insertionAnimation = []\n        let length = input.length;\n        for (let i = 1; i < length; i++) {\n                let value = input[i];\n                let j = i - 1;\n                while (j >= 0 && input[j] > value) {\n                        //push indices to swap colors\n                        insertionAnimation.push([j, j+1, 'color', 'change']);\n                        insertionAnimation.push([j, j+1, 'color', 'revert']);\n                        //push indices to swap bars\n                        insertionAnimation.push([j+1, j, 'barSwap'])\n                        insertionAnimation.push([j+1, input[j], 'height']);\n                        \n                        input[j + 1] = input[j];\n                        j--;\n                }\n                insertionAnimation.push([j+1, value, 'height'])\n                input[j + 1] = value;\n        }\n        return insertionAnimation\n}\n\n//heapSortAnimation function\n//Parameters: input - array storing all values\n//Returns: array containing a list of animations\n//Does: Performs a heap sort and pushes required swap and color animations \n//      to the array to visualize\nexport function heapSortAnimations(input) {\n        let heapAnimation = []\n        for (let i = Math.floor(input.length / 2 - 1); i >= 0; i--) {\n                heapify(input, input.length, i, heapAnimation);        \n        }\n        for (let i = input.length - 1; i >= 0; i--) {\n                \n                heapSwap(input, 0, i, heapAnimation);\n                heapify(input, i, 0, heapAnimation); \n        }\n        return heapAnimation\n}\n\n//heapify function\n//Parameters: input - array of all values\n//            size - the size of the array being motified\n//            i - parent element of the 'nodes' being checked\n//            heapAnimation - array storing all animations\n//Returns: Nothing\n//Does: Ensures shape and heap invariants and performs a upheap \n//      if necessary\nfunction heapify(input, size, i, heapAnimation) {\n        let max = i;\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if (left < size && input[left] > input[max]) {\n                max = left;\n        }\n        if (right < size && input[right] > input[max]) {\n                max = right;\n        }\n        //push indices to swap colors\n        heapAnimation.push([i, max, 'color', 'change']);\n        heapAnimation.push([i, max, 'color', 'revert']);\n\n        if (max !== i) {\n                heapSwap(input, i, max, heapAnimation);\n                heapify(input, size, max, heapAnimation);       \n        }\n}\n\n//heapSwap function\n//Parameters: input - the array of all values\n//            first - first index being swapped\n//            second - second index being swapped\n//            heapAniamtion - array storing all animations\n//Returns: Nothing\n//Does: Swaps the values contained at the indices passed in and\n//      pushes required animation to the heapAnimation array\nfunction heapSwap(input, first, second, heapAnimation) {\n        //push indices to swap bars \n        heapAnimation.push([first, second, 'height']);\n        let temp = input[first];\n        input[first] = input[second];\n        input[second] = temp;\n}\n\n//mergeSortAnimations functions\n//Parameters: array - array of all values\n//Returns: array containing all animations\n//Does: Performs a merge sort and pushes required swap and color animations\n//      to the array to visualize\nexport function mergeSortAnimations(array) {\n        let tempArray = Array.from(array);\n        let mergeAnimation = []\n        mergeSortHelper(array, 0, array.length - 1, tempArray, mergeAnimation);\n        return mergeAnimation\n}\n\n//mergeSortHelper function\n//Parameters: input - array of all values\n//            startIndex - beginning index of the array being searched\n//            endIndex - end index of array being searched\n//            tempArray - second copy of array \n//            mergeAnimation - array containing all animations for merge sort\n//Returns: Nothing\n//Does: Recursively calls in order to get to the 'smallest' section of the array\nfunction mergeSortHelper(input, startIndex, endIndex, tempArray, mergeAnimation) {\n        if (startIndex === endIndex) {\n                return;\n        }\n        let middleIndex = Math.floor((startIndex + endIndex) / 2);\n        mergeSortHelper(tempArray, startIndex, middleIndex, input, mergeAnimation);\n        mergeSortHelper(tempArray, middleIndex + 1, endIndex, input, mergeAnimation);\n        mergeSortHelp(input, startIndex, middleIndex, endIndex, tempArray, mergeAnimation);\n}\n\n//mergeSortHelp function\n//Parameters: input - array of all values\n//            startIndex - beginning index of the array being searched\n//            endIndex - end index of array being searched\n//            middleIndex - the middle of the indices passed in \n//            tempArray - second copy of array\n//            mergeAnimation - array containing all animations for a merge sort\n//Returns: Nothing \n//Does: Performs the swapping of the merge sort and pushes all animations to the\n//      mergeAnimation array\nfunction mergeSortHelp(input, startIndex, middleIndex, endIndex, tempArray, mergeAnimation) {\n        let x = startIndex, y = startIndex, z = middleIndex + 1;\n        while (y <= middleIndex && z <= endIndex) {\n                //push indices to swap colors\n                mergeAnimation.push([y, z, 'color', 'change']);\n                mergeAnimation.push([y, z, 'color', 'revert']);\n                if (tempArray[y] <= tempArray[z]) {\n                        //push indices to swap array bars\n                        mergeAnimation.push([x, tempArray[y], 'height']);\n                        input[x++] = tempArray[y++];\n                } else {\n                        //push indices to swap array bars\n                        mergeAnimation.push([x, tempArray[z], 'height']);\n                        input[x++] = tempArray[z++];\n                }\n        }\n        while (y <= middleIndex) {\n                //push indices to swap colors\n                mergeAnimation.push([y, y, 'color', 'change']);\n                mergeAnimation.push([y, y, 'color', 'revert']);\n                //push indices to swap array bars\n                mergeAnimation.push([x, tempArray[y], 'height']);\n                input[x++] = tempArray[y++];\n        }\n        while (z <= endIndex) {\n                //push indices to swap colors\n                mergeAnimation.push([z, z, 'color', 'change']);\n                mergeAnimation.push([z, z, 'color', 'revert']);\n                //push indices to swap array bars\n                mergeAnimation.push([x, tempArray[z], 'height']);\n                input[x++] = tempArray[z++];\n        }\n}\n\n//selectionSortAnimation function\n//Parameters: input - array of all values\n//Returns: array of all animations\n//Does: Performs a selection sort and pushes required swap and color animations\n//      to the array in order to visualize\nexport function selectionSortAnimations(input) {\n        let selectionAnimation = []\n        let length = input.length;\n        for (let i = 0; i < length; i++) {\n                let minimum = i;\n                for (let j = i + 1; j < length; j++) {\n                        //push indices to swap colors\n                        selectionAnimation.push([j, minimum, 'color', 'change']);\n                        selectionAnimation.push([j, minimum, 'color', 'revert']);\n                        if (input[minimum] > input[j]) {\n                                minimum = j;\n                        }\n                }\n                if (minimum !== i) {\n                        //push indices to swap array bars\n                        selectionAnimation.push([i, input[minimum], 'height']);\n                        selectionAnimation.push([minimum, input[i], 'height']);\n\n                        let temp = input[i];\n                        input[i] = input[minimum];\n                        input[minimum] = temp;\n                }\n        }\n        return selectionAnimation\n}","//ColorPick.js\n\nimport React from 'react'\nimport reactCSS from 'reactcss'\nimport { ChromePicker } from 'react-color'\nimport './ColorPick.css'\n\nexport default class ColorPick extends React.Component {\n        constructor(props) {\n                super(props)\n                this.state = {\n                        displayColorPicker: false,\n                        color: {\n                                r: `${this.props.barColor.r}`,\n                                g: `${this.props.barColor.g}`,\n                                b: `${this.props.barColor.b}`,\n                                a: `${this.props.barColor.a}`\n                        }\n                };\n                //bind methods that update the state of the ColorPick component\n                this.handleClick = this.handleClick.bind(this)\n                this.handleChange = this.handleChange.bind(this)\n        }\n        \n        //handleClick function\n        //Parameters: Nothing\n        //Returns: Nothing\n        //Does: Updates the displayColorPicker value of the component\n        handleClick() {\n                this.setState({ displayColorPicker: !this.state.displayColorPicker }) \n        };\n\n        //handleClose function\n        //Parameters: Nothing\n        //Returns: Nothing\n        //Does: Updates the displayColorPicker of the component\n        handleClose() {\n                this.setState({ displayColorPicker: false })\n        };\n\n        //handleChange function\n        //Parameters: color - the color being selected\n        //Returns: Nothing\n        //Does: Updates the color stored in the state of the component\n        handleChange(color) {\n                this.setState({ color: color.rgb })\n                \n        };\n\n        render() {\n                // The styles used when rendering the components\n                const styles = reactCSS({\n                'default': {\n                        color: {\n                                width: '36px',\n                                height: '14px',\n                                borderRadius: '2px',\n                                background: `rgba(${ this.state.color.r }, ${ this.state.color.g }, ${ this.state.color.b }, ${ this.state.color.a })`\n                        },\n                        swatch: {\n                                padding: '1px',\n                                background: '#fff',\n                                borderRadius: '1px',\n                                display: 'inline-block',\n                                cursor: 'pointer',\n                        },\n                        popover: {\n                                position: 'absolute',\n                                zIndex: '2',\n                        },\n                        cover: {\n                                position: 'fixed',\n                        },\n                },\n                });\n\n                return (\n                        <div>\n                                <div style={ styles.swatch } onClick={ this.handleClick }>\n                                        <h2 style={{fontSize: '0.6vw'}}>{this.props.buttonText}</h2>\n                                <div style={ styles.color } />\n                        </div>\n                        { this.state.displayColorPicker && !this.props.colorPickDisabled ? <div style={ styles.popover }>\n                                <div style={ styles.cover } onClick={ this.handleClose }/>\n                                {/* Render SketchPicker component from react-color */}\n                                <ChromePicker color={ this.state.color } onChange={(color) => {\n                                                                                        this.handleChange(color) \n                                                                                        this.props.changeColor(`${this.state.color.r}`,\n                                                                                                                `${this.state.color.g}`,\n                                                                                                                `${this.state.color.b}`,\n                                                                                                                `${this.state.color.a}`)\n                                                                                }} />\n                        </div> : null }\n                </div>\n                )\n        }\n        }","//Slider.js\n\nimport React from 'react'\nimport './Slider.css'\n\nexport default class Slider extends React.Component {\n\n        render() { \n                return <div className=\"slider-outer\">\n                                <h2>Sorting Speed\n                                        {/* range input component that allows the user\n                                            to select the speed of the visulization */}\n                                        <input \n                                                onChange={event => {\n                                                        this.props.changeSpeedValue(event.target.value)\n                                                }}\n                                                type='range'\n                                                className='slider'\n                                                min='1'\n                                                max='11'\n                                                value={this.props.value}\n                                                disabled={this.props.sliderDisabled}>\n                                        </input>\n                                </h2>      \n                        </div>\n        }\n}","//SortingButtons.js\n\nimport React from 'react'\nimport { bubbleSortAnimations, \n        insertionSortAnimations,\n        heapSortAnimations,\n        mergeSortAnimations,\n        selectionSortAnimations } from './SortingAlgorithms'\n\nimport ColorPick from './ColorPick/ColorPick'\nimport Slider from './Slider/Slider'\nimport './SortingButtons.css'\n\n//Maximum sorting speed\nconst MAX_SPEED = 12\n\nexport default class SortingButtons extends React.Component {\n\n        constructor(props) {\n                super(props)\n\n                //animation array\n                this.animation = []\n                //timeout array\n                this.timeoutAnimation = [];\n                //array of div tags \n                this.bars = document.getElementsByClassName('singleBar')\n\n                //initial values of this class' state\n                this.state = {\n                        disabled: false,\n                        sortingSpeed: 6,\n                        sliderDisabled: false,\n                        colorPickDisabled: false,\n                        swapColor: {\n                                r: `${this.props.secondColor.r}`,\n                                g: `${this.props.secondColor.g}`,\n                                b: `${this.props.secondColor.b}`,\n                                a: `${this.props.secondColor.a}`\n                        }\n                }\n\n                //bind methods that update state\n                this.heapSort = this.heapSort.bind(this)\n                this.changeSortingSpeed = this.changeSortingSpeed.bind(this)\n                this.changeSwapColor = this.changeSwapColor.bind(this)\n        }\n\n        //bubbleSort function\n        //Parameters: array - array of un-sorted values\n        //Returns: Nothing\n        //Does: Performs and visualizes a bubble sort \n        bubbleSort(array) {\n                this.disableButtons()\n                this.animation = bubbleSortAnimations(array)\n                let bars = document.getElementsByClassName('singleBar')\n                for (let i = 0; i < this.animation.length; i++) {\n                        let [firstIndex, secondIndex, typeChange, instruction] = this.animation[i];\n                        if (typeChange === 'color') {\n                                this.colorSwap(firstIndex, secondIndex, instruction, bars, i);\n                        } else {\n                                this.timeoutAnimation.push(setTimeout( () => {\n                                        const [index, heightVal] = this.animation[i];\n                                        bars[index].style.height = `${heightVal}px`;\n                                }, i*(MAX_SPEED-this.state.sortingSpeed)));\n                        }\n                }\n        }\n\n        //heapSort function\n        //Parameters: array - array of un-sorted values\n        //Returns: Nothing\n        //Does: Performs and visualizes a heap sort\n        heapSort(array) {\n                this.disableButtons()\n                this.animation = heapSortAnimations(array);\n                let bars = document.getElementsByClassName('singleBar')\n                for (let i = 0; i < this.animation.length; i++) {\n                        let [firstIndex, secondIndex, typeChange, instruction] = this.animation[i];\n                        if (typeChange === 'color') {\n                                this.colorSwap(firstIndex, secondIndex, instruction, bars, i);\n                        } else {\n                                this.barSwap(firstIndex, secondIndex, bars, i);\n                        }\n                }\n        }\n\n        //insertionSort function\n        //Parameters: array - array of un-sorted values\n        //Returns: Nothing\n        //Does: Performs and visualizes an insertion sort\n        insertionSort(array) {\n                this.disableButtons()\n                this.animation = insertionSortAnimations(array);\n                let bars = document.getElementsByClassName('singleBar')\n                for (let i = 0; i < this.animation.length; i++) {\n                        let [firstIndex, secondIndex, typeChange, instruction] = this.animation[i];\n                        if (typeChange === 'color') {\n                                this.colorSwap(firstIndex, secondIndex, instruction, bars, i);\n                        } else if (typeChange === 'height') {\n                                this.timeoutAnimation.push(setTimeout( () => {\n                                        const [index, heightVal] = this.animation[i];\n                                        bars[index].style.height = `${heightVal}px`;\n                                }, i*(MAX_SPEED-this.state.sortingSpeed)));\n                        } else {\n                                this.barSwap(firstIndex, secondIndex, bars, i);\n                        }\n                }\n        }\n\n        //selectionSort function\n        //Parameters: array - array of un-sorted values\n        //Returns: Nothing \n        //Does: Performs and visualizes a selection sort\n        selectionSort(array) {\n                this.disableButtons()\n                this.animation = selectionSortAnimations(array);\n                let bars = document.getElementsByClassName('singleBar')\n                for (let i = 0; i < this.animation.length; i++) {\n                        let [firstIndex, secondIndex, typeChange, instruction] = this.animation[i];\n                        if (typeChange === 'color') {\n                                this.colorSwap(firstIndex, secondIndex, instruction, bars, i);\n                        } else {\n                                this.timeoutAnimation.push(setTimeout( () => {\n                                        const [index, heightVal] = this.animation[i];\n                                        bars[index].style.height = `${heightVal}px`;\n                                }, i*(MAX_SPEED-this.state.sortingSpeed)));\n                        }\n                }\n        }\n\n        //mergeSort function\n        //Parameters: array - array of un-sorted values\n        //Returns: Nothing\n        //Does: Performs and visualizes a merge sort \n        mergeSort(array) {\n                this.disableButtons()\n                this.animation = mergeSortAnimations(array)\n                let bars = document.getElementsByClassName('singleBar')\n                for (let i = 0; i < this.animation.length-1; i++) {\n                        let [firstIndex, secondIndex, typeChange, instruction] = this.animation[i];\n                        if (typeChange === 'color') {\n                                this.colorSwap(firstIndex, secondIndex, instruction, bars, i);\n                        } else {\n                                this.timeoutAnimation.push(setTimeout( () => {\n                                        const [index, heightVal] = this.animation[i];\n                                        bars[index].style.height = `${heightVal}px`;\n                                }, i*(MAX_SPEED-this.state.sortingSpeed)));\n                        } \n                }\n        }\n\n        //resetArray function\n        //Parameters: Nothing\n        //Returns: Nothing\n        //Does: clears all unfinished animations, clears all timeouts, \n        //      and re-enables all buttons/sliders \n        resetArray() {\n                this.animation = []\n                let bars = document.getElementsByClassName('singleBar')\n                for (let i = 0; i < bars.length; i++) {\n                        bars[i].style.backgroundColor = `rgba(${ this.props.barColor.r }, \n                                                                ${ this.props.barColor.g }, \n                                                                ${ this.props.barColor.b }, \n                                                                ${ this.props.barColor.a })`\n                }\n                for (let i = 0; i < this.timeoutAnimation.length; i++) {\n                        clearTimeout(this.timeoutAnimation[i])\n                }\n                this.timeoutAnimation = []\n\n                this.setState({disabled: false})\n                this.setState({sliderDisabled: false})\n                this.setState({colorPickDisabled: false})\n        }\n        \n        //barSwap function\n        //Parameters: firstVal - first index being swapped\n        //            secondVal - second index being swapped\n        //            bars - array of div tags corresponding to each array value\n        //            i - the current index in the main for loop\n        //Returns: Nothing\n        //Does: Swaps the bar heights of the div tags at the firstVal and secondVal \n        //      indices \n        barSwap(firstVal, secondVal, bars, i) {\n                this.timeoutAnimation.push(setTimeout( () => {\n                        let temp = bars[firstVal].style.height;\n                        bars[firstVal].style.height = bars[secondVal].style.height;\n                        bars[secondVal].style.height = temp;\n                }, i*(MAX_SPEED-this.state.sortingSpeed)));\n        }\n\n        //colorSwap fucntion\n        //Parameters: firstIndex - first index being swapped \n        //            secondIndex - second index being swapped\n        //            instruction - 'direction' of change (change/revert)\n        //            bars - array of div tags corresponding to each array value\n        //            i - the current index in the main for loop\n        //Returns: Nothing\n        //Does: Changes/Reverts the color of the bars located at firstIndex and \n        //      secondIndex to indicate to the user that those bars are being\n        //      currently checked\n        colorSwap(firstIndex, secondIndex, instruction, bars, i) {\n                const checkColor = `rgba(${ this.state.swapColor.r }, \n                        ${ this.state.swapColor.g }, \n                        ${ this.state.swapColor.b }, \n                        ${ this.state.swapColor.a })`\n                const barColor = `rgba(${ this.props.barColor.r }, \n                        ${ this.props.barColor.g }, \n                        ${ this.props.barColor.b }, \n                        ${ this.props.barColor.a })`\n                let firstBar = bars[firstIndex].style;\n                let secondBar = bars[secondIndex].style;\n                let changeColor = instruction === 'change' ? checkColor : barColor;\n                this.timeoutAnimation.push(setTimeout( () => {\n                        firstBar.backgroundColor = changeColor;\n                        secondBar.backgroundColor = changeColor;\n                }, i*(MAX_SPEED-this.state.sortingSpeed)));\n        }\n\n        //disableButtons function\n        //Parameters: Nothing\n        //Returns: Nothing\n        //Does: Disables buttons/slider/color picker when sorting animation is going\n        disableButtons() {\n                this.setState({disabled: true})\n                this.setState({sliderDisabled: true})\n                this.setState({colorPickDisabled: true})\n        }\n\n        //changeBarColor function\n        //Parameters: Nothing\n        //Returns: Nothing\n        //Does: changes the color of each bar, calls method \n        //      contained in the parent component\n        changeBarColor() {\n                this.props.changeColor();\n        }\n\n        //changeSortingSpeed function\n        //Parameters: speed - new sorting speed entered by the user\n        //Returns: Nothing\n        //Does: Updates the speed the sorting animations execute \n        changeSortingSpeed(speed) {\n                this.setState({sortingSpeed: speed})\n        }\n\n        //changeSwapColor function\n        //Parameters: r,g,b,a - RGBA values of a color\n        //Returns: Nothing\n        //Does: Updates the secondary color of the animation\n        changeSwapColor(r,g,b,a) {\n                this.setState({swapColor: {\n                                r: r, g: g, b: b, a: a}})\n        }\n        \n        render() {\n                const array = this.props.stateArray\n                return (\n                        <div className=\"sortingButtonsBar\">\n                                {/* Buttons for each sorting algorithm as well as \n                                    a button to reset the array bars */}\n                                <button \n                                        className='sortingButtons'\n                                        onClick={() => {\n                                                this.resetArray()\n                                                this.props.reset()\n                                        }}\n                                        >Create New Array \n                                </button>\n                                <button \n                                        className='sortingButtons'\n                                        onClick={() => this.bubbleSort(array)} \n                                        disabled={this.state.disabled}>Bubble Sort\n                                </button>\n                                <button \n                                        className='sortingButtons'\n                                        onClick={() => this.mergeSort(array)}\n                                        disabled={this.state.disabled}>Merge Sort\n                                </button>\n                                <button \n                                        className='sortingButtons'\n                                        onClick={() => this.insertionSort(array)}\n                                        disabled={this.state.disabled}>Insertion Sort\n                                </button>\n                                <button \n                                        className='sortingButtons'\n                                        onClick={() => this.heapSort(array)}\n                                        disabled={this.state.disabled}>Heap Sort\n                                </button>\n                                <button \n                                        className='sortingButtons'\n                                        onClick={() => this.selectionSort(array)}\n                                        disabled={this.state.disabled}>Selection Sort\n                                </button>\n                                {/* Slider component that allows the user to select the speed of \n                                    the sorting algorithms */}\n                                <Slider \n                                        className='sortingButtons'\n                                        changeSpeedValue={this.changeSortingSpeed}\n                                        value={this.state.sortingSpeed}\n                                        sliderDisabled={this.state.sliderDisabled}/>\n                                {/* ColorPick component that allows the user to chose the color \n                                    of the bars as well as the color used when swapping */}\n                                <div className=\"changeColorButtons\">\n                                        <ColorPick \n                                                className=\"colorBars\"\n                                                barColor={this.props.barColor}\n                                                changeColor={this.props.changeColor}\n                                                buttonText={\"Change Primary Color\"}\n                                                colorPickDisabled={this.state.colorPickDisabled}/>\n                                        <ColorPick \n                                                className=\"colorBars\"\n                                                barColor={this.state.swapColor}\n                                                changeColor={this.changeSwapColor}\n                                                buttonText={\"Change Secondary Color\"}\n                                                colorPickDisabled={this.state.colorPickDisabled}/>\n                                </div>\n                        </div>\n                )\n        }\n}","//SortingVis.js\n\nimport React from 'react'\nimport './SortingVis.css'\nimport SortingButtons from './SortingButtons/SortingButtons'\n\nconst SCREEN_WIDTH = window.innerWidth\nconst SCREEN_HEIGHT = window.innerHeight\n\nconst NUM_ARRAY_BARS = Math.floor(SCREEN_WIDTH/15)\n\n//generateRandomNumber\n//Parameters: min - minimum bound of number\n//            max - maximum bound of number\n//Returns: A random number\n//Does: Generates a random number between the min value and the max \n//      value \nfunction generateRandomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default class SortingVis extends React.Component {\n        constructor(props) {\n                super(props)\n\n                this.state = {\n                        array: [],\n                        primaryColor: {\n                                r: '255', g: '192', b: '203', a: '1'\n                        },\n                        secondaryColor: {\n                                r: '255', g: '0', b: '0', a: '1'\n                        }\n                }\n                \n                //bind methods of SortingVis class that update state\n                this.generateNewArray = this.generateNewArray.bind(this)\n                this.changeColor = this.changeColor.bind(this)\n        }\n\n        //componentDidMount React lifecycle method\n        componentDidMount() {\n                this.generateNewArray()\n        }\n\n        //generateNewArray function\n        //Parameters: None\n        //Returns: array\n        //Does: Generates a new array containing randomly generated values \n        generateNewArray() {\n                const array = [];\n                for (let i = 0; i < NUM_ARRAY_BARS; i++) {\n                        array.push(generateRandomNumber(SCREEN_HEIGHT*0.05, SCREEN_HEIGHT*0.80))\n                }\n                this.setState({array: array})\n        }\n\n        //changeColor function\n        //Parameters: r,g,b,a - RGBA values of a color \n        //Returns: Nothing\n        //Does: Changes the state of the current class based\n        //      on the passed in color \n        changeColor(r,g,b,a) {\n                this.setState({primaryColor: {\n                                r: r, g: g, b: b, a: a}})\n        }\n\n        //render components\n        render() {\n                const finalArray = this.state.array\n                //current bar color \n                let barColor = `rgba(${ this.state.primaryColor.r }, \n                        ${ this.state.primaryColor.g }, \n                        ${ this.state.primaryColor.b }, \n                        ${ this.state.primaryColor.a })`\n                return (\n                        <div>\n                                <div className='buttons'>\n                                {/* Creates a bar for each sorting algorithm button as \n                                    well as a speed slider and color selector */}\n                                        <SortingButtons \n                                                reset={this.generateNewArray} \n                                                stateArray={finalArray}\n                                                barColor={this.state.primaryColor}\n                                                secondColor={this.state.secondaryColor}\n                                                changeColor={this.changeColor}/>\n                                </div>\n                                {/* arrays values within the array and maps \n                                    each value to a bar and a corresponding height */}\n                                <div className='bars'>\n                                        {finalArray.map((number, id) => (\n                                                <div \n                                                        className='singleBar'\n                                                        key = { id }\n                                                        style = {{ \n                                                                backgroundColor: barColor,\n                                                                height: `${number}px`\n                                                }}>\n                                                </div>\n                                        ))}\n                        </div>\n                        </div>\n                        \n                )\n        }\n}","//App.js\n\nimport React from 'react'\nimport SortingVis from './components/SortingVis/SortingVis'\n\n//App component renders the main SortingVis component\nexport default class App extends React.Component {\n        render() {\n                return <SortingVis />\n        }\n}","//index.js \n\nimport React from 'react'\nimport ReactDom from 'react-dom'\n\nimport App from './App'\n\n//render app component to the html 'root' element\nReactDom.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}